{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","front/tests/app.lint-test.js","front/tests/helpers/destroy-app.js","front/tests/helpers/module-for-acceptance.js","front/tests/helpers/start-app.js","front/tests/test-helper.js","front/tests/tests.lint-test.js","front/tests/unit/routes/home-test.js","front/tests/unit/routes/score-test.js","front/tests/unit/routes/simulator-test.js","front/tests/unit/routes/truck-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('front/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/score.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/score.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/simulator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/simulator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/truck.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/truck.js should pass ESLint\\n\\n');\n  });\n});","define('front/tests/helpers/destroy-app', ['exports'], function (exports) {\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.default = destroyApp;\n\tvar run = Ember.run;\n\tfunction destroyApp(application) {\n\t\trun(application, 'destroy');\n\t}\n});","define('front/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'front/tests/helpers/start-app', 'front/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\n\texports.default = function (name) {\n\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t(0, _qunit.module)(name, {\n\t\t\tbeforeEach: function beforeEach() {\n\t\t\t\tthis.application = (0, _startApp.default)();\n\n\t\t\t\tif (options.beforeEach) {\n\t\t\t\t\treturn options.beforeEach.apply(this, arguments);\n\t\t\t\t}\n\t\t\t},\n\t\t\tafterEach: function afterEach() {\n\t\t\t\tvar _this = this;\n\n\t\t\t\tvar afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n\t\t\t\treturn resolve(afterEach).then(function () {\n\t\t\t\t\treturn (0, _destroyApp.default)(_this.application);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tvar resolve = Ember.RSVP.resolve;\n});","define('front/tests/helpers/start-app', ['exports', 'front/app', 'front/config/environment'], function (exports, _app, _environment) {\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.default = startApp;\n\tvar merge = Ember.merge;\n\tvar run = Ember.run;\n\tfunction startApp(attrs) {\n\t\tvar attributes = merge({}, _environment.default.APP);\n\t\tattributes = merge(attributes, attrs); // Use defaults, but you can override;\n\n\t\treturn run(function () {\n\t\t\tvar application = _app.default.create(attributes);\n\t\t\tapplication.setupForTesting();\n\t\t\tapplication.injectTestHelpers();\n\t\t\treturn application;\n\t\t});\n\t}\n});","define('front/tests/test-helper', ['front/app', '@ember/test-helpers', 'ember-qunit'], function (_app, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create({ autoboot: false }));\n\n  (0, _emberQunit.start)();\n});","define('front/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/score-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/score-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/simulator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/simulator-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/truck-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/truck-test.js should pass ESLint\\n\\n');\n  });\n});","define('front/tests/unit/routes/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/score-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:score', 'Unit | Route | score', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/simulator-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:simulator', 'Unit | Route | simulator', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/truck-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:truck', 'Unit | Route | truck', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('front/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}